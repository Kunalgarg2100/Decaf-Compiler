; ModuleID = 'Decaff'
source_filename = "Decaff"

@arr = common global [110 x i32] zeroinitializer
@0 = private unnamed_addr constant [4 x i8] c"%d \00"
@1 = private unnamed_addr constant [3 x i8] c"\5Cn\00"
@2 = private unnamed_addr constant [14 x i8] c"Invalid Input\00"
@3 = private unnamed_addr constant [26 x i8] c"No second largest element\00"
@4 = private unnamed_addr constant [29 x i8] c"Second Largest element is %d\00"

define void @initialize(i32 %n) {
entry:
  %i5 = alloca i32
  %i = alloca i32
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  %0 = load i32, i32* %n1
  %subop = sub i32 %0, 1
  store i32 0, i32* %i, align 4
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = phi i32 [ 0, %entry ], [ %nextvar, %loop ]
  %1 = load i32, i32* %i
  %arrINDEX = getelementptr [110 x i32], [110 x i32]* @arr, i32 0, i32 %1
  %2 = load i32, i32* %n1
  %3 = load i32, i32* %i
  %subop3 = sub i32 %2, %3
  store i32 %subop3, i32* %arrINDEX, align 4
  %i4 = load i32, i32* %i, align 4
  %nextvar = add i32 %i4, 1
  store i32 %nextvar, i32* %i, align 4
  %loopcondition = icmp slt i32 %nextvar, %subop
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  store i32 0, i32* %i5, align 4
  br label %loop6

loop6:                                            ; preds = %loop6, %afterloop
  %i7 = phi i32 [ 0, %afterloop ], [ %nextvar10, %loop6 ]
  %4 = load i32, i32* %i5
  %arrINDEX8 = getelementptr [110 x i32], [110 x i32]* @arr, i32 0, i32 %4
  %5 = load i32, i32* %arrINDEX8
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([4 x i8], [4 x i8]* @0, i32 0, i32 0), i32 %5)
  %i9 = load i32, i32* %i5, align 4
  %nextvar10 = add i32 %i9, 1
  store i32 %nextvar10, i32* %i5, align 4
  %loopcondition11 = icmp slt i32 %nextvar10, 10
  br i1 %loopcondition11, label %loop6, label %afterloop12

afterloop12:                                      ; preds = %loop6
  %call13 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @1, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...)

define void @nextMax(i32 %n) {
entry:
  %i = alloca i32
  %max2 = alloca i32, align 4
  %max1 = alloca i32, align 4
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  store i32 0, i32* %max1, align 4
  store i32 0, i32* %max2, align 4
  %0 = load i32, i32* %n1
  %ltvop = icmp slt i32 %0, 2
  br i1 %ltvop, label %then, label %else

then:                                             ; preds = %entry
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([14 x i8], [14 x i8]* @2, i32 0, i32 0))
  br label %ifcont

else:                                             ; preds = %entry
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  store i32 -1, i32* %max1, align 4
  store i32 -1, i32* %max2, align 4
  %1 = load i32, i32* %n1
  %subop = sub i32 %1, 1
  store i32 0, i32* %i, align 4
  br label %loop

loop:                                             ; preds = %ifcont16, %ifcont
  %i2 = phi i32 [ 0, %ifcont ], [ %nextvar, %ifcont16 ]
  %2 = load i32, i32* %i
  %arrINDEX = getelementptr [110 x i32], [110 x i32]* @arr, i32 0, i32 %2
  %3 = load i32, i32* %arrINDEX
  %4 = load i32, i32* %max1
  %gtop = icmp sgt i32 %3, %4
  br i1 %gtop, label %then3, label %else5

then3:                                            ; preds = %loop
  %5 = load i32, i32* %max1
  store i32 %5, i32* %max2, align 4
  %6 = load i32, i32* %i
  %arrINDEX4 = getelementptr [110 x i32], [110 x i32]* @arr, i32 0, i32 %6
  %7 = load i32, i32* %arrINDEX4
  store i32 %7, i32* %max1, align 4
  br label %ifcont16

else5:                                            ; preds = %loop
  %8 = load i32, i32* %i
  %arrINDEX6 = getelementptr [110 x i32], [110 x i32]* @arr, i32 0, i32 %8
  %9 = load i32, i32* %arrINDEX6
  %10 = load i32, i32* %max2
  %gtop7 = icmp sgt i32 %9, %10
  br i1 %gtop7, label %then8, label %else14

then8:                                            ; preds = %else5
  %11 = load i32, i32* %i
  %arrINDEX9 = getelementptr [110 x i32], [110 x i32]* @arr, i32 0, i32 %11
  %12 = load i32, i32* %arrINDEX9
  %13 = load i32, i32* %max1
  %neqop = icmp ne i32 %12, %13
  br i1 %neqop, label %then10, label %else12

then10:                                           ; preds = %then8
  %14 = load i32, i32* %i
  %arrINDEX11 = getelementptr [110 x i32], [110 x i32]* @arr, i32 0, i32 %14
  %15 = load i32, i32* %arrINDEX11
  store i32 %15, i32* %max2, align 4
  br label %ifcont13

else12:                                           ; preds = %then8
  br label %ifcont13

ifcont13:                                         ; preds = %else12, %then10
  br label %ifcont15

else14:                                           ; preds = %else5
  br label %ifcont15

ifcont15:                                         ; preds = %else14, %ifcont13
  br label %ifcont16

ifcont16:                                         ; preds = %ifcont15, %then3
  %i17 = load i32, i32* %i, align 4
  %nextvar = add i32 %i17, 1
  store i32 %nextvar, i32* %i, align 4
  %loopcondition = icmp slt i32 %nextvar, %subop
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %ifcont16
  %16 = load i32, i32* %max2
  %eqop = icmp eq i32 %16, -1
  br i1 %eqop, label %then18, label %else20

then18:                                           ; preds = %afterloop
  %call19 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @3, i32 0, i32 0))
  br label %ifcont22

else20:                                           ; preds = %afterloop
  %17 = load i32, i32* %max2
  %call21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([29 x i8], [29 x i8]* @4, i32 0, i32 0), i32 %17)
  br label %ifcont22

ifcont22:                                         ; preds = %else20, %then18
  ret void
}

define void @main() {
entry:
  %n = alloca i32, align 4
  store i32 0, i32* %n, align 4
  store i32 100, i32* %n, align 4
  %0 = load i32, i32* %n
  call void @initialize(i32 %0)
  %1 = load i32, i32* %n
  call void @nextMax(i32 %1)
  ret void
}
