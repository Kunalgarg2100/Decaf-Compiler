; ModuleID = 'Decaff'
source_filename = "Decaff"

@sum = common global i32 0
@n = common global i32 0
@k = common global [5 x i32] zeroinitializer
@p = common global i32 0
@0 = private unnamed_addr constant [5 x i8] c"%d\5Cn\00"
@1 = private unnamed_addr constant [6 x i8] c"123\5Cn\00"
@2 = private unnamed_addr constant [6 x i8] c"223\5Cn\00"
@3 = private unnamed_addr constant [5 x i8] c"%d\5Cn\00"
@4 = private unnamed_addr constant [5 x i8] c"%d\5Cn\00"

define void @fun(i32 %n, i32 %m) {
entry:
  %m2 = alloca i32, align 4
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  store i32 %m, i32* %m2, align 4
  %0 = load i32, i32* %m2
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @0, i32 0, i32 0), i32 %0)
  ret void
}

declare i32 @printf(i8*, ...)

define void @main() {
entry:
  %m = alloca i32, align 4
  %l = alloca i32, align 4
  store i32 0, i32* %l, align 4
  store i32 0, i32* %m, align 4
  store i32 6, i32* %m, align 4
  %m1 = load i32, i32* %m
  %addEqop = add i32 %m1, 1000
  store i32 %addEqop, i32* %m, align 4
  store i32 -6, i32* %m, align 4
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @1, i32 0, i32 0))
  %call2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @2, i32 0, i32 0))
  call void @fun(i32 2, i32 4)
  %call3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @3, i32 0, i32 0), i32 5)
  %0 = load i32, i32* %m
  %call4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @4, i32 0, i32 0), i32 %0)
  ret void
}
