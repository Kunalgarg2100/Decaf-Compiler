; ModuleID = 'Decaff'
source_filename = "Decaff"

@0 = private unnamed_addr constant [12 x i8] c"ans is %d\5Cn\00"

define i32 @num(i32 %a) {
entry:
  %a1 = alloca i32, align 4
  store i32 %a, i32* %a1, align 4
  %0 = load i32, i32* %a1
  ret i32 %0
}

define i32 @func(i32 %n) {
entry:
  %i = alloca i32
  %sum = alloca i32, align 4
  %n1 = alloca i32, align 4
  store i32 %n, i32* %n1, align 4
  store i32 0, i32* %sum, align 4
  store i32 0, i32* %sum, align 4
  %0 = load i32, i32* %n1
  %addop = add i32 %0, 1
  store i32 1, i32* %i, align 4
  br label %loop

loop:                                             ; preds = %loop, %entry
  %i2 = phi i32 [ 1, %entry ], [ %nextvar, %loop ]
  %1 = load i32, i32* %i
  %2 = call i32 @num(i32 %1)
  %sum3 = load i32, i32* %sum
  %addEqop = add i32 %sum3, %2
  store i32 %addEqop, i32* %sum, align 4
  %i4 = load i32, i32* %i, align 4
  %nextvar = add i32 %i4, 1
  store i32 %nextvar, i32* %i, align 4
  %loopcondition = icmp slt i32 %nextvar, %addop
  br i1 %loopcondition, label %loop, label %afterloop

afterloop:                                        ; preds = %loop
  %3 = load i32, i32* %sum
  ret i32 %3
}

define void @main() {
entry:
  %ans = alloca i32, align 4
  %n = alloca i32, align 4
  store i32 0, i32* %n, align 4
  store i32 0, i32* %ans, align 4
  store i32 100, i32* %n, align 4
  %0 = load i32, i32* %n
  %1 = call i32 @func(i32 %0)
  store i32 %1, i32* %ans, align 4
  %2 = load i32, i32* %ans
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0), i32 %2)
  ret void
}

declare i32 @printf(i8*, ...)
