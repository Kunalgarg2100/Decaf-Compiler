; ModuleID = 'Decaff'
source_filename = "Decaff"

@0 = private unnamed_addr constant [12 x i8] c"fib is %d\5Cn\00"

define void @fib(i32 %x, i32 %y) {
entry:
  %y2 = alloca i32, align 4
  %x1 = alloca i32, align 4
  store i32 %x, i32* %x1, align 4
  store i32 %y, i32* %y2, align 4
  %0 = load i32, i32* %x1
  %eqop = icmp eq i32 %0, 1
  br i1 %eqop, label %then, label %else

then:                                             ; preds = %entry
  %y3 = load i32, i32* %y2
  %addEqop = add i32 %y3, 1
  store i32 %addEqop, i32* %y2, align 4
  br label %ifcont

else:                                             ; preds = %entry
  %y4 = load i32, i32* %y2
  %addEqop5 = add i32 %y4, 1
  store i32 %addEqop5, i32* %y2, align 4
  %1 = load i32, i32* %x1
  %subop = sub i32 %1, 1
  %2 = load i32, i32* %y2
  call void @fib(i32 %subop, i32 %2)
  %3 = load i32, i32* %y2
  %call = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([12 x i8], [12 x i8]* @0, i32 0, i32 0), i32 %3)
  br label %ifcont

ifcont:                                           ; preds = %else, %then
  ret void
}

declare i32 @printf(i8*, ...)

define void @main() {
entry:
  %y = alloca i32, align 4
  store i32 0, i32* %y, align 4
  store i32 0, i32* %y, align 4
  %0 = load i32, i32* %y
  call void @fib(i32 10, i32 %0)
  ret void
}
